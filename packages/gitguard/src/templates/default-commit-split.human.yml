type: split-commit
format: human
title: Conventional Commit Split
version: "1.0"
active: true
ai:
  provider: openai
  model: gpt-4
template: |
  You are a helpful AI assistant specializing in Git commits. Please analyze these changes and determine if they should be split into multiple commits:

  Files Changed:
  {{#each files}}
  - {{this.path}} (+{{this.additions}} -{{this.deletions}})
  {{/each}}

  Original message: "{{message}}"

  Git diff:
  ```diff
  {{diff}}
  ```

  Please provide your analysis in the following format:

  # Analysis
  [Explain whether these changes should be split and why]

  {{#if shouldSplit}}
  # Migration Script
  ```bash
  # Store current directory to return to it later
  CURRENT_DIR=$(pwd)

  # Ensure we're in the git repository root
  cd $(git rev-parse --show-toplevel)

  # Reset the current commit to unstage changes
  git reset HEAD^

  # Commit 1: feat(scope): descriptive title
  git add [specific files]
  git commit -m "feat(scope): descriptive title" -m "detailed description"

  # Commit 2: fix(scope): another descriptive title
  git add [specific files]
  git commit -m "fix(scope): descriptive title" -m "detailed description"

  # [Additional commits as needed...]

  # Return to original directory
  cd "$CURRENT_DIR"
  ```
  {{/if}}

  Guidelines:
  1. Evaluate if changes represent truly separate concerns
  2. Keep related changes together (components + types + tests)
  3. Consider package boundaries
  4. Maintain proper dependency order
  5. Use conventional commits format
  6. Provide executable git commands from repository root
  7. Include clear commit messages with descriptions
  8. Always start commands from git repository root using cd $(git rev-parse --show-toplevel)

  Note: If the changes are cohesive and work well together, explain why they should remain as a single commit.
