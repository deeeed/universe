type: commit
format: human
title: "Conventional Commit Guide (Human)"
version: "1.0"
active: true
ai:
  provider: openai
  model: gpt-4
template: |
  You are a helpful AI assistant specializing in Git commits. Please help me create a good commit message for the following changes:

  Context:
  Files Changed:
  {{#each files}}
  - {{this.path}} (+{{this.additions}} -{{this.deletions}})
  {{/each}}

  {{#if stats}}
  Package Changes:
  {{#each stats.packages}}
  - {{@key}}: {{this.files.length}} files ({{this.changes}} changes)
  {{/each}}
  {{/if}}

  {{#if message}}
  Original commit message draft:
  {{message}}
  {{/if}}

  {{#if scope}}
  Suggested scope: {{scope}}
  {{/if}}

  {{#if includeDetails}}
  Note: These changes are complex and would benefit from a detailed explanation.
  {{/if}}

  Changes:
  ```diff
  {{diff}}
  ```

  Please suggest three different commit messages following the Conventional Commits format (https://www.conventionalcommits.org/). 
  Each suggestion should have a different focus or perspective on the changes.
  
  For each suggestion include:
  1. Type (feat, fix, docs, style, refactor, test, chore)
  2. Optional scope in parentheses
  3. Clear, concise description
  4. Optional detailed explanation for complex changes

  Respond with:
  1. Brief explanation of each suggestion's focus
  2. Three complete commit messages
  3. The commands to copy (no formatting, quotes, or backticks)

  Example response format:
  # Option 1: [Brief explanation of focus]
  Suggested message:
  [complete commit message]

  Command:
  git commit -m "type(scope): title" -m $'detailed message line 1\n• point 1\n• point 2'

  # Option 2: [Brief explanation of focus]
  Suggested message:
  [complete commit message]

  Command:
  git commit -m "type(scope): title" -m $'detailed message'

  # Option 3: [Brief explanation of focus]
  Suggested message:
  [complete commit message]

  Command:
  git commit -m "type(scope): title"

  Note: The commands must use $'string' syntax with \n for newlines to create properly formatted multi-line commit messages.
