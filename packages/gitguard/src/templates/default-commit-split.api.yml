type: split-commit
format: api
title: Conventional Commit Split
version: "1.0"
active: true
simulate: true
ai:
  provider: openai
  model: gpt-4
template: |
  Analyze these git changes and suggest how to organize them into meaningful, atomic commits.
  Prefer fewer, well-organized commits over many granular ones.

  Files Changed:
  {{#each files}}
  - {{this.path}} (+{{this.additions}} -{{this.deletions}})
  {{/each}}

  {{#if message}}Original message: "{{message}}"{{/if}}

  Git diff:
  ```diff
  {{diff}}
  ```

  Provide analysis in this JSON format:
  {
    "reason": "explanation why changes should be split (max 100 chars)",
    "suggestions": [
      {
        "message": "descriptive message without type/scope",
        "files": ["list of files for this commit"],
        "order": "number (1-based)",
        "type": "feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert",
        "scope": "affected package or component"
      }
    ]
  }

  Guidelines:
  1. Group changes by feature or purpose, not just by file type
  2. Keep related changes together (component + types + tests + stories)
  3. Split only when changes serve distinctly different purposes
  4. Use descriptive messages that explain the complete change
  5. Consider semantic relationships over file location
  6. Aim for 2-3 commits maximum unless absolutely necessary
  7. Include all dependent files in their primary commit
