(self.webpackChunk_siteed_design_system=self.webpackChunk_siteed_design_system||[]).push([[95,4464],{"./src/hooks/useToast/useToast.stories.tsx":(module,exports,__webpack_require__)=>{var _interopRequireDefault=__webpack_require__("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.Default=void 0;_interopRequireDefault(__webpack_require__("./node_modules/react/index.js"));var _reactNativePaper=__webpack_require__("./node_modules/react-native-paper/lib/module/index.js"),_ScreenWrapper=__webpack_require__("./src/components/ScreenWrapper/ScreenWrapper.tsx"),_useToast2=__webpack_require__("./src/hooks/useToast/useToast.tsx"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js"),UseToastDemo=(exports.default={title:"Hooks/useToast",parameters:{docs:{description:{component:"A hook for displaying toast notifications."}}}},function UseToastDemo(){var _useToast=(0,_useToast2.useToast)(),show=_useToast.show,hide=_useToast.hide,loader=_useToast.loader;return(0,_jsxRuntime.jsxs)(_ScreenWrapper.ScreenWrapper,{contentContainerStyle:{gap:15},children:[(0,_jsxRuntime.jsx)(_reactNativePaper.Button,{onPress:function onPress(){show({message:"Success message",iconVisible:!0,type:"success"})},children:"Show Success Toast"}),(0,_jsxRuntime.jsx)(_reactNativePaper.Button,{onPress:function onPress(){show({message:"Warning message",type:"warning",duration:5e3})},children:"Show Warning Toast"}),(0,_jsxRuntime.jsx)(_reactNativePaper.Button,{onPress:function onPress(){show({message:"Error message",subMessage:"Additional error details",type:"error"})},children:"Show Error Toast"}),(0,_jsxRuntime.jsx)(_reactNativePaper.Button,{onPress:function onPress(){return loader("Loading...")},children:"Show Loading Toast"}),(0,_jsxRuntime.jsx)(_reactNativePaper.Button,{onPress:hide,children:"Hide All Toasts"})]})});exports.Default=function Default(){return(0,_jsxRuntime.jsx)(UseToastDemo,{})};module.exports.__namedExportsOrder=["Default"]},"./src/hooks/useToast/useToast.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.useToast=void 0;var _react=__webpack_require__("./node_modules/react/index.js"),_ToastProvider=__webpack_require__("./src/providers/ToastProvider.tsx"),useToast=exports.useToast=function useToast(){var toast=(0,_react.useContext)(_ToastProvider.ToastContext);if(!toast)throw new Error("useToast must be used within a ToastProvider.");return toast};try{useToast.displayName="useToast",useToast.__docgenInfo={description:"useToast hook is used to show and hide Toast messages.\n## Usage\nImport the `useToast` hook from the library. Calling it will return you an object with two functions `show` and `hide` to show or hide toast.\n\n```tsx\nimport { useToast } from 'react-native-paper-toast';\n\nexport const Screen: React.FC<Props> = (props) => {\n  const toaster = useToast();\n  // You can now toast methods from handler functions, effects or onPress props!\n\n  // Call from handler function\n  const handleError = () =>\n    toaster.show({ message: 'Invalid Username', type: 'error' });\n\n  // Call from Effects\n  useEffect(() => {\n    login(username, password).then((v) =>\n      toaster.show({ message: 'Login successful', duration: 2000 })\n    );\n  });\n\n  return (\n   <Surface>\n     <Button onPress={() => toaster.show({ message: 'Here is a toast for ya!' })}>\n       Show Toast\n     </Button>\n     <Button onPress={toaster.hide}>Hide Toast</Button>\n   </Surface>\n );\n};\n```",displayName:"useToast",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/hooks/useToast/useToast.tsx#useToast"]={docgenInfo:useToast.__docgenInfo,name:"useToast",path:"src/hooks/useToast/useToast.tsx#useToast"})}catch(__react_docgen_typescript_loader_error){}}}]);